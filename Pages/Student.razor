@page "/students"
@using Pschool.Client.Model
@using System.Text.Json
@using System.Text
@inject HttpClient Http

<h2 style="text-align:center; font-weight:bold; margin-top:10px;">
    Manage Students
</h2>

<!-- 🔍 Parent Filter -->
<div class="actions-bar">
    <select class="form-control" style="width: 250px;" @onchange="OnParentFilterChanged">
        <option value="">-- All Parents --</option>
        @foreach (var parent in parents)
        {
            <option value="@parent.Id">@parent.FullName</option>
        }
    </select>
    <button class="add-btn" @onclick="ShowAddForm">Add Student</button>
</div>

@if (showForm)
{
    <div class="form-card">
        <h4>@(editingStudent != null ? "Edit Student" : "Add New Student")</h4>

        <div class="form-group">
            <label>Full Name</label>
            <input class="form-control" @bind="formModel.FullName" />
        </div>

        <div class="form-group">
            <label>Age</label>
            <input type="number" class="form-control" @bind="formModel.Age" />
        </div>

        <div class="form-group">
            <label>Phone</label>
            <input class="form-control" @bind="formModel.Phone" />
        </div>

        <div class="form-group">
            <label>Address</label>
            <input class="form-control" @bind="formModel.Address" />
        </div>

        <div class="form-group">
            <label>Parent</label>
            <select class="form-control" @bind="formModel.ParentId">
                <option value="">-- Select Parent --</option>
                @foreach (var parent in parents)
                {
                    <option value="@parent.Id">@parent.FullName</option>
                }
            </select>
        </div>

        <div class="form-actions">
            <button class="save-btn" @onclick="SaveStudent">💾 Save</button>
            <button class="cancel-btn" @onclick="CancelForm">❌ Cancel</button>
        </div>
    </div>
}

@if (filteredStudents == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredStudents.Any())
{
    <p style="text-align:center; color:gray;">No students found.</p>
}
else
{
    <table class="parent-table">
        <thead>
            <tr>
                <th>👨‍🎓 Name</th>
                <th>🎂 Age</th>
                <th>📞 Phone</th>
                <th>🏠 Address</th>
             
                <th>⚙️ Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in filteredStudents)
            {
                <tr>
                    <td>@student.FullName</td>
                    <td>@student.Age</td>
                    <td>@student.Phone</td>
                    <td>@student.Address</td>
                  <td>
                        <button class="edit-btn" @onclick="() => EditStudent(student)">✏️</button>
                        <button class="delete-btn" @onclick="() => OpenDeletePopup(student.Id, student.FullName)">🗑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- ✅ Reusable Popup -->
@if (showDialog)
{
    <div class="confirm-overlay">
        <div class="confirm-dialog @dialogType">
            <h4>@dialogTitle</h4>
            <p>@dialogMessage</p>
            <div class="confirm-actions">
                @if (onConfirmAction != null)
                {
                    <button class="confirm-btn delete" @onclick="ConfirmDialogAction">OK</button>
                    <button class="confirm-btn cancel" @onclick="CloseDialog">Cancel</button>
                }
                else
                {
                    <button class="confirm-btn" @onclick="CloseDialog">OK</button>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<StudentDTO>? students;
    private List<StudentDTO>? filteredStudents;
    private List<ParentDTO> parents = new();
    private StudentDTO formModel = new();
    private bool showForm = false;
    private StudentDTO? editingStudent;

    // Popup
    private bool showDialog;
    private string dialogTitle = "";
    private string dialogMessage = "";
    private string dialogType = "info";
    private EventCallback? onConfirmAction;

    private int selectedStudentId;
    private string? selectedStudentName;
    private int? selectedParentFilterId;

    protected override async Task OnInitializedAsync()
    {
        await LoadParents();
        await LoadStudents();
    }

    private async Task LoadParents()
    {
        var result = await Http.GetFromJsonAsync<ApiResponse<List<ParentDTO>>>("api/Parents/GetAll");
        parents = result?.ResponseObject ?? new();
    }

    private async Task LoadStudents()
    {
        var result = await Http.GetFromJsonAsync<ApiResponse<List<StudentDTO>>>("api/Students/GetAllStudents");
        students = result?.ResponseObject ?? new();
        FilterStudents();
    }

    private void OnParentFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
            selectedParentFilterId = id;
        else
            selectedParentFilterId = null;

        FilterStudents();
    }

    private void FilterStudents()
    {
        if (students == null) return;
        if (selectedParentFilterId.HasValue)
            filteredStudents = students.Where(s => s.ParentId == selectedParentFilterId.Value).ToList();
        else
            filteredStudents = students.ToList();
    }

    private void ShowAddForm()
    {
        showForm = true;
        editingStudent = null;
        formModel = new();
    }

    private void EditStudent(StudentDTO student)
    {
        showForm = true;
        editingStudent = student;
        formModel = new StudentDTO
        {
            Id = student.Id,
            FullName = student.FullName,
            Age = student.Age,
            Phone = student.Phone,
            Address = student.Address,
            ParentId = student.ParentId
        };
    }

    private async Task SaveStudent()
    {
        if (editingStudent == null)
            await Http.PostAsJsonAsync("api/Students/CreateStudents", formModel);
        else
            await Http.PutAsJsonAsync("api/Students/UpdateStudent", formModel);

        await LoadStudents();
        showForm = false;
        await ShowDialog("Success ✅", "Student saved successfully!", "success");
    }

    private void CancelForm() => showForm = false;

    // Delete logic
    private void OpenDeletePopup(int id, string name)
    {
        selectedStudentId = id;
        selectedStudentName = name;
        _ = ShowDialog("Delete Student", $"Are you sure you want to delete {name}?", "warning",
            EventCallback.Factory.Create(this, ConfirmDelete));
    }

    private async Task ConfirmDelete()
    {
        showDialog = false;

        var payload = new { id = selectedStudentId };
        var request = new HttpRequestMessage(HttpMethod.Delete, "api/Students/DeleteStudent")
        {
            Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json")
        };

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            students = students?.Where(s => s.Id != selectedStudentId).ToList();
            FilterStudents();
            await ShowDialog("Deleted 🗑️", $"{selectedStudentName} has been removed.", "success");
        }
    }

    // Popup control
    private async Task ShowDialog(string title, string message, string type = "info", EventCallback? confirmAction = null)
    {
        dialogTitle = title;
        dialogMessage = message;
        dialogType = type;
        onConfirmAction = confirmAction;
        showDialog = true;
    }

    private async Task ConfirmDialogAction()
    {
        if (onConfirmAction.HasValue)
            await onConfirmAction.Value.InvokeAsync(null);
        showDialog = false;
    }

    private void CloseDialog() => showDialog = false;

    // DTOs
    public class ApiResponse<T>
    {
        public string? UniqueID { get; set; }
        public string? ResponseCode { get; set; }
        public string? ResponseDescription { get; set; }
        public T? ResponseObject { get; set; }
    }

    public class StudentDTO
    {
        public int Id { get; set; }
        public string? FullName { get; set; }
        public int Age { get; set; }
        public string? Phone { get; set; }
        public string? Address { get; set; }
        public int ParentId { get; set; }
        public string? ParentName { get; set; }
    }

    public class ParentDTO
    {
        public int Id { get; set; }
        public string? FullName { get; set; }
    }
}
